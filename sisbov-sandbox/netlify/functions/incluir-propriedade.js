const fs = require('fs');const path = require('path');const DB_PATH = path.join(process.cwd(), 'db.json');const readDb = () => {  try {    const data = fs.readFileSync(DB_PATH, 'utf8');    return JSON.parse(data);  } catch (error) {    console.error('Erro ao ler db.json:', error);    return { animais: [], propriedades: [] };  }};const writeDb = (data) => {  try {    fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2), 'utf8');  } catch (error) {    console.error('Erro ao escrever db.json:', error);  }};exports.handler = async (event, context) => {  if (event.httpMethod !== 'POST') {    return { statusCode: 405, body: 'Method Not Allowed' };  }  try {    const { _nomePropriedade, _nirf, ...rest } = JSON.parse(event.body);    let xmlContent;    let filePath;    if (_nomePropriedade && _nirf && _nirf !== '123') {      filePath = path.join(process.cwd(), 'api-examples', 'incluirPropriedade_response_success.xml');      const db = readDb();      const newId = db.propriedades.length > 0 ? Math.max(...db.propriedades.map(p => p.idPropriedade)) + 1 : 1001;      db.propriedades.push({ idPropriedade: newId, _nomePropriedade, _nirf, ...rest });      writeDb(db);      xmlContent = fs.readFileSync(filePath, 'utf8');      xmlContent = xmlContent.replace('<ns1:idPropriedade>1001</ns1:idPropriedade>', `<ns1:idPropriedade>${newId}</ns1:idPropriedade>`);    } else {      filePath = path.join(process.cwd(), 'api-examples', 'incluirPropriedade_response_error.xml');      xmlContent = fs.readFileSync(filePath, 'utf8');      if (!_nomePropriedade) {          xmlContent = xmlContent.replace('<ns2:menssagemErro>Campo \'nomePropriedade\' é obrigatório.</ns2:menssagemErro>',                                         `<ns2:menssagemErro>Campo \'nomePropriedade\' é obrigatório. Valor informado: ${_nomePropriedade}</ns2:menssagemErro>`);      }      if (_nirf === '123') {          xmlContent = xmlContent.replace('<ns2:menssagemErro>NIRF inválido.</ns2:menssagemErro>',                                         `<ns2:menssagemErro>NIRF inválido. Valor informado: ${_nirf}</ns2:menssagemErro>`);      }    }    return {      statusCode: 200,      headers: {        'Content-Type': 'application/xml',      },      body: xmlContent,    };  } catch (error) {    console.error('Erro na função incluirPropriedade:', error);    return {      statusCode: 500,      body: `<h1>Erro interno no servidor de simulação (incluirPropriedade)</h1><p>${error.message}</p>`,    };  }};} 